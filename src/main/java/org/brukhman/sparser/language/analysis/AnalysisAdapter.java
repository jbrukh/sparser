/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.brukhman.sparser.language.analysis;

import java.util.*;
import org.brukhman.sparser.language.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAGrammar(AGrammar node)
    {
        defaultCase(node);
    }

    public void caseAPlusExp(APlusExp node)
    {
        defaultCase(node);
    }

    public void caseAMinusExp(AMinusExp node)
    {
        defaultCase(node);
    }

    public void caseADivExp(ADivExp node)
    {
        defaultCase(node);
    }

    public void caseAMultExp(AMultExp node)
    {
        defaultCase(node);
    }

    public void caseATextualExp(ATextualExp node)
    {
        defaultCase(node);
    }

    public void caseARandomX2Exp(ARandomX2Exp node)
    {
        defaultCase(node);
    }

    public void caseANumberExp(ANumberExp node)
    {
        defaultCase(node);
    }

    public void caseAT1Textual(AT1Textual node)
    {
        defaultCase(node);
    }

    public void caseAT2Textual(AT2Textual node)
    {
        defaultCase(node);
    }

    public void caseAT3Textual(AT3Textual node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTOne(TOne node)
    {
        defaultCase(node);
    }

    public void caseTTwo(TTwo node)
    {
        defaultCase(node);
    }

    public void caseTThree(TThree node)
    {
        defaultCase(node);
    }

    public void caseTRandom(TRandom node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
